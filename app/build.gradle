apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'dellog'
//apply from: '../groovy_base.gradle'
//apply from: '../prod.gradle'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.yi.jetpackdemo"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode verCode as Integer
        versionName getLocalVersionName()
//        archivesBaseName = "jetpack-$versionName"
        multiDexEnabled true
    }

    signingConfigs {
        config {
            keyAlias 'xiaoyi'
            keyPassword '123456'
            storeFile file('sign.jks')
            storePassword '123456'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }

    }
    // 用于android应用gradle插件 libraryVariants  testVariants
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "jetpack_${variant.buildType.name}_${defaultConfig.versionName}.apk"
        }
    }
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            if (output.outputFile != null && output.outputFile.name.endsWith('.apk') && "release".equals(variant.buildType.name)) {
//                def apkFile = new File(output.outputFile.getParent(), "2jetpack_${variant.buildType.name}_${defaultConfig.versionName}")
//                output.outputFile = apkFile
//            }
//        }
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // 使用buildFeature声明
    buildFeatures {
        viewBinding = true
        dataBinding = true
    }
    dynamicFeatures = [':rxjavaDemo']

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'

    // Kotlin concurrent-futures
    implementation "androidx.concurrent:concurrent-futures-ktx:1.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    def fragment_version = "1.3.0-alpha04"
    // Java language implementation
    implementation "androidx.fragment:fragment:$fragment_version"
    // Kotlin
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    // fragment navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'
    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"


    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // 添加wrokManager
    def work_version = "2.4.0"
    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"
    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"
    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"

    // 添加room持久库
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    // 添加greenDao
    implementation 'org.greenrobot:greendao:3.3.0' // add library
//    implementation files('libs/sqlcipher.jar')
//    implementation "net.zetetic:android-database-sqlcipher:4.4.2"
//    implementation "androidx.sqlite:sqlite:2.1.0"

    // 添加stecho库 查看数据库，打印网络日志
    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation('com.facebook.stetho:stetho-okhttp3:1.5.1') {
        exclude group: 'com.android.support'
        exclude group: 'com.squareup.okhttp3'
    }
    implementation 'com.facebook.stetho:stetho-js-rhino:1.5.1'

    // multidex
    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"

    // logger
    implementation "com.orhanobut:logger:2.2.0"

    // smarttablayout
    implementation 'com.ogaclejapan.smarttablayout:library:2.0.0@aar'
    implementation 'com.ogaclejapan.smarttablayout:utils-v4:2.0.0@aar'


//    testImplementation 'junit:junit:4.13.1'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // banner
    implementation 'com.youth.banner:banner:2.1.0'

    // eventBus
    implementation 'org.greenrobot:eventbus:3.2.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.16'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.google.code.gson:gson:2.8.5'

    // retrofit dependence okhttp okio
    def retrofit2_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2_version"
    implementation("com.squareup.retrofit2:converter-gson:$retrofit2_version") {
        exclude group: 'com.squareup.okhttp3'
    }
    implementation("com.squareup.retrofit2:adapter-rxjava2:$retrofit2_version") {
        exclude group: 'com.squareup.okhttp3'
    }
    def okhttp3_version = "3.8.1"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttp3_version") {
        exclude group: 'com.android.support'
        exclude group: 'com.squareup.okhttp3'
    }
    implementation("com.squareup.okhttp3:okhttp-urlconnection:$okhttp3_version") {
        exclude group: 'com.squareup.okhttp3'
    }

}

static def generateApkTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+8"))
}

def getLocalVersionName() {
    def vName
    if (!gradle.startParameter.taskNames.contains(":app:release")) {
        vName = verName + "_" + generateApkTime()
    } else {
        vName = verName
    }
    println("versionName1=" + gradle.startParameter.taskNames)
    println("versionName2=" + vName)
    return vName
}

// 自定义plugin
//dellogExtension.sourceDir = '/src'
dellogExtension {
//    sourceDir = '/src'
}


greendao {
    schemaVersion 1
//    daoPackage "com.yi.jetpackDemo.room.dao"
}
