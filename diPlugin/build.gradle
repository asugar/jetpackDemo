/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
    id 'maven-publish'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    implementation 'com.android.tools.build:gradle:4.0.1'
}

gradlePlugin {
    // Define the plugin
    plugins {
        // 执行的gralde的任务名字
        di {
            // app 中引用plgin id
            id = 'com.yi.di'
            implementationClass = 'com.yi.di.DiPlugin'
        }
        // 如何添加多个plugin？目前看应该不能这样
//        demo {
//            id = 'com.yi.demo'
//            implementationClass = 'com.yi.di.DemoPlugin'
//        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

publishing {
    publications {
        // 指定Publish名字
        di(MavenPublication) {
            // 插件的组ID，建议设置为插件的包名
            groupId = 'com.yi.di'
            // 翻译过来是 工件ID，我的理解是插件的名字
            artifactId = 'diplugin'
            version = '1.0.0'
            sourceSets
            // 组件类型，我们的插件其实就是Java组件
            from components.java
            artifact sourceJar
        }
    }
    repositories {
        maven {
            // 对应mavenRepository
            url = "$rootDir/repo"
        }
    }
}
